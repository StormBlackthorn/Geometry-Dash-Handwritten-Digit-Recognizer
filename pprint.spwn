//all characters allowed as object keys
allowed_chrs = {" ": 32, "@": 64, "`": 96, "!": 33, "A": 65, "a": 97,"\"": 34, "B": 66, "b": 98,"#": 35, "C": 67, "c": 99,"$": 36, "D": 68, "d": 100,"%": 37, "E": 69, "e": 101,"&": 38, "F": 70, "f": 102,"'": 39, "G": 71, "g": 103,"(": 40, "H": 72, "h": 104,")": 41, "I": 73, "i": 105,"*": 42, "J": 74, "j": 106,"+": 43, "K": 75, "k": 107,",": 44, "L": 76, "l": 108,"-": 45, "M": 77, "m": 109,".": 46, "N": 78, "n": 110,"/": 47, "O": 79, "o": 111,"0": 48, "P": 80, "p": 112,"1": 49, "Q": 81, "q": 113,"2": 50, "R": 82, "r": 114,"3": 51, "S": 83, "s": 115,"4": 52, "T": 84, "t": 116,"5": 53, "U": 85, "u": 117,"6": 54, "V": 86, "v": 118,"7": 55, "W": 87, "w": 119,"8": 56, "X": 88, "x": 120,"9": 57, "Y": 89, "y": 121,":": 58, "Z": 90, "z": 122,";": 59, "[": 91, "{": 123,"<": 60, "\\": 92, "|": 124,"=": 61, "]": 93, "}": 125,">": 62, "^": 94, "~": 126,"?": 63} 
//dictionary with "id: name" of object props
let obj_prop_names = {}
obj_props.items().map(i => obj_prop_names.set($.display(i[1].id), i[0]))


CODE_OMITTED_REGEX = @regex::new(r"\s\{ /\* code omitted \*/ \}(\s?)")

total_str = (s) {
	return s.split("").map(c => allowed_chrs[c]).sum()
}

type @ASCENDING
type @DESCENDING

type @pprint
impl @pprint {

	pprint: (
		#[desc("The object to pretty-print. Can be of type `@dictionary`, `@array` or `@macro`")]
		object, 
		#[desc("The number of padding spaces to print each element with. Default is `4`")]
		spaces: @number=4,
		#[desc("Will recursively loop over any nested objects and pretty print those too. Default is `true`")]
		recurse_objects: @bool=true, 
		#[desc("The order in which the keys of a dictionary will be sorted (between `@ASCENDING` and `@DESCENDING`). Default is `@ASCENDING`.")]
		key_sort=@ASCENDING,
	) {
		padding = "".join([" " for i in 0..spaces])
		let string = ""

		if object.type == @array {
			string += @pprint::_format_array(object, "", padding, recurse_objects)
		}
		else if object.type == @dictionary {
			//key sorting macro
	 		sort = (a,b) => (total_str(a) >= total_str(b)) if key_sort == @DESCENDING else
								(total_str(a) <= total_str(b))
		
			string += @pprint::_format_dict(object, "", padding, recurse_objects, sort)
		}
		else if object.type == @macro {
			string += @pprint::_format_macro(object, "", padding)
		}
		else if object.type == @object {
			string += @pprint::_format_object(object, "", padding)
		}

		$.print(string)
	},

	_format_dict: (object, padding, const_padding, recurse, sort) {
		let string = "\n" + padding + "{\n"

		let keys = object.keys().sorted(comp=sort)

		for k in keys {
			string += (padding + const_padding + k + ": ")

			string += (@pprint::_get_recur_func(object[k], recurse)(object[k], padding+const_padding, const_padding, recurse, sort) + ",\n")
		}

		string += (padding + "}")

		return string
	},

	_format_array: (object, padding, const_padding, recurse, sort) {
		let string = "\n" + padding + "[\n"

		for v in object {
			//remove trailing newline if the next element is any object
			if $.matches(v, @array|@dictionary|@macro) && recurse {
				string = string.r_trim("\n")
			}

			string += (padding + const_padding + @pprint::_get_recur_func(v, recurse)(v, padding+const_padding, const_padding, recurse, sort) + ",\n")
		}

		string += (padding + "]")

		return string
	},

	//the _ arguments ignore both the "recurse" (since macros are not formatted recursively) and "sort" arguments
	_format_macro: (object, padding, const_padding, _=null, _=null) {
		let string = "\n" + padding + "(\n"

		let object = CODE_OMITTED_REGEX.replace($.display(object), "")
		//remove brackets
		object = object.substr(1, object.length - 1)

		for v in object.split(",") {
			string += (padding + const_padding + v.l_trim(" ") + "\n")
		}

		string += (padding + ")")

		return string
	},

	//the _ arguments ignore both the "recurse" (since objects are not formatted recursively) and "sort" arguments
	_format_object: (object, padding, const_padding, _=null, _=null) {
		let string = "\n" + padding + const_padding + "obj->{\n"

		vals = $.display(object).r_trim(";").split(",")

		for i in 0..2..vals.length - 1 {
			string += (padding + const_padding + const_padding + obj_prop_names[vals[i]] + ": " + vals[i+1] + ",\n")
		}

		string += (padding + const_padding + "}")

		return string
	},

	_get_recur_func: (object, recurse) {
		if recurse && object.type == @array {
			return @pprint::_format_array
		}
		else if recurse && object.type == @dictionary {
			return @pprint::_format_dict
		}
		else if recurse && object.type == @macro {
			return @pprint::_format_macro
		}
		else if recurse && object.type == @object {
			return @pprint::_format_object
		}
		else {
			//(janky) fallback function
			return (_=null, _=null, _=null, _=null, _=null) { return CODE_OMITTED_REGEX.replace($.display(object), "") }
		}
	}
}

return {
	ASCENDING: @ASCENDING,
	DESCENDING: @DESCENDING,
	pprint: @pprint,
}